generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  idClient      Int     @id @default(autoincrement())
  name          String
  corporateName String?
  phone         String?
  state         String?
  country       String?
  city          String?
  address       String?
  cpfCnpj       String
  isActive      Boolean

  Product       Product[]
  ProductDetail ProductDetail[]
  Supplier      Supplier[]
  SupplierInfo  SupplierInfo[]
  StockMovement StockMovement[]
  User          User[]
  Category      Category[]
  Role          Role[]
}

model Product {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  sellingPrice Float
  sku          String   @unique
  barcode      String?  @unique
  quantity     Int
  supplierId   Int?
  categoryId   Int?
  clientId     Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Category      Category?       @relation(fields: [categoryId], references: [id])
  Supplier      Supplier?       @relation(fields: [supplierId], references: [id])
  StockMovement StockMovement[]
  ProductDetail ProductDetail?
  Client        Client?          @relation(fields: [clientId], references: [idClient])
}

model ProductDetail {
  id             Int     @id @default(autoincrement())
  productId      Int     @unique
  clientId       Int?
  brand          String?
  model          String?
  dimensions     String?
  weight         Float?
  color          String?
  material       String?
  additionalInfo String?

  Product Product @relation(fields: [productId], references: [id])
  Client  Client?  @relation(fields: [clientId], references: [idClient])
}

model Supplier {
  id               Int           @id @default(autoincrement())
  name             String
  corporateName    String?
  cpfCnpj          String        @unique
  street           String?
  number           String?
  neighborhood     String?
  city             String?
  state            String?
  zipCode          String?
  mainContactName  String?
  mainContactPhone String?
  mainContactEmail String?
  secondaryPhone   String?
  secondaryEmail   String?
  website          String?
  clientId         Int?
  products         Product[]
  supplierInfo     SupplierInfo?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  Client           Client?        @relation(fields: [clientId], references: [idClient])
}

model SupplierInfo {
  id             Int     @id @default(autoincrement())
  supplierId     Int     @unique
  clientId       Int?
  paymentTerms   String?
  paymentMethods String?
  freightTerms   String?

  Supplier Supplier @relation(fields: [supplierId], references: [id])
  Client   Client?   @relation(fields: [clientId], references: [idClient])
}

model StockMovement {
  id        Int      @id @default(autoincrement())
  productId Int
  clientId  Int?
  type      String // "in" para entrada, "out" para sa√≠da
  quantity  Int
  date      DateTime @default(now())
  userId    Int

  User    User    @relation(fields: [userId], references: [id])
  Product Product @relation(fields: [productId], references: [id])
  Client  Client?  @relation(fields: [clientId], references: [idClient])
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      Int      @default(0)
  clientId  Int?
  resetPassword Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Role          Role            @relation(fields: [role], references: [id])
  StockMovement StockMovement[]
  Client        Client?          @relation(fields: [clientId], references: [idClient])
}

model Category {
  id       Int       @id @default(autoincrement())
  title    String
  clientId Int?
  products Product[]

  Client   Client? @relation(fields: [clientId], references: [idClient])
}

model Role {
  id    Int    @id @default(autoincrement())
  title String
  clientId Int?

  User   User[]
  Client Client? @relation(fields: [clientId], references: [idClient])
}
